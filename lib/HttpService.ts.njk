import axios, { AxiosError, AxiosResponse, Method } from 'axios';
import config from '@/config';

export interface RequestObject {
  method: string
  path: string
  formData?: object
  params?: object
  qs?: object
  body?: object
  headers?: object
  baseUrl?: string
}

export default class HttpService {
  public static headers = {};

  /**
   * Make the http request via axios
   */
  public static async sendRequest (requestObject: RequestObject): Promise<any> {
    const baseUrl = requestObject.baseUrl || config.api.baseUrl
    const URL = baseUrl + HttpService.injectParamsToPath(requestObject.params, requestObject.path);
    return new Promise((resolve, reject) => {
      axios({
        headers: {
          ...requestObject.headers || {},
          ...HttpService.headers
        },
        method: requestObject.method as unknown as Method,
        data: requestObject.formData || requestObject.body || {},
        params: requestObject.qs || {},
        url: URL,
      }).then((response: AxiosResponse) => {
        resolve(response.data);
      }).catch((err: AxiosError) => {
        reject(err);
      });
    });
  }

  /**
   * Injects the values into a path
   */
  static injectParamsToPath (params: object = {}, path: string) {
    Object.keys(params).forEach((param) => {
      path = path.replace(':' + param, params[param]);
    });
    return path;
  }
}
